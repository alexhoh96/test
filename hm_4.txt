Client_Server
1) Прочиать про клиент-серверную архитектуру
Клиент-серверная архитектура- то архитектура, в которой сетевая нагрузка распределяется между поставщика услуг , которые называются серверами, и заказчиками услуг,которые называются клиентами.
Клиент отправляет запрс (request) на сервер, сервер его обрабатывает и потправляет клиенту обратнно ответ (response), т.е. ответ от сервера.
В случае двухуровневой системы, мы имее дополнительный элемент базу данных, которой отправляет запрос сервер.
Существует 2 типа клиента:
а) тонкий- перенос большей части задач на сервер;
б) толстый - большая часть по обработки данных ложтся на клиента. 
2) Что ткое HTTP и HTTPS
http/https - hypertext transfer protocol - протокол передачи гипертекста, является протоколом прикладного уровня. Https - это протоколы, котторые обеспечивают сохранность данных при передачи информации. 
http 1.1 - использует для передачи текстовый формат, из-за чего намного больше занимамает места и дольше передается.
http 2.0 - использует бинарный формат, 0 и 1. Информация передается одомоментно.
3) HTTP методы
get - запрос информации от нашего сервера;
post - полезная нагрузка на сервер (картинка, текст) отправка новых данных на сервер;
put - обновление ресурса (изменения уже на имеющуюся на сервере информацию);
delete - удаляет ресур по указанному url;
options - методы используемые вэб сервера;
patch - похож на put, но применяется только к фрагменту текста;
head - похож на get, но не возвращает тело ответа;
connect - двухсторонняя связь с запрошенным ресурсом (получение доступа к веб-сайту, который использует https);
trace - возврщает информацию, какие данные добавляют или изменяют прокси-серверы в запросе.
4) HTTP статус коды сервера
Статус коды делятся на 5 типов:
а) информационные 100е
100- продолжить (запрос принят и клиент может дальше слать запросы);
101- переключение протокола;
102 -в обработке, запрос получен но еще обрабатывается;
103- сообщаются ресурсы, которые могут быть загружены раньше, пока сервер будет подготавливать основной ответ;
б) успешные 200е 
200 -успешно обработан запрос;
201 - создано для put;
202- запрос принят, но еще не обработан;
203- информация возвращена не от исходного сервера;
204 - нет содержимого для ответа на запрос, но заголовки ответа присылаются;
205- запрос обработан, чтобы сбросить отображение документа, который прислал этот запрос.
в) перенаправления 300е
301- информацию сервер вернул, но нашел в другом месте;
301- клиент обратился к странице, но она перемещена по другому адресу;
304 - инф о сайте в кэше.
г) клиентские ошибки 400е
400- запрос не обработан сервером;
401- неверный логин и пароль;
403- нет прав для доступа;
404 - обращение к ресурсу, которого нет на сервере;
405- метод к ресурсу не применяется (кроме get and head) он был деактивирован.
д) серверные ошибки 500е
500- сервер не знает как обработать запрос;
501 - метод запроса не поддерживется сервером (кроме get and head);
502- получен недопустимый ответ;
503- сервис не доступен (перегружен);
505 - не поддерживается протоколом (версия http).
5) Что такое ядро браузера 
браузер = оболочка + ядро
оболочка (меню, панель инструментов для работы с пользовательским интерфесом);
ядро - это программа, которая отображает контент на основе языка разметки;
ядро= движок рендеринга (получение содержимого html, xml, изображние, добавление css) + движок Js аналзирует язык и выполняет его для достижения динамических эффектов вэб страницы.
6) Какие браузеры какиие ядра используют
Blink: Google
Gecko: Mozilla
WebKit: Apple
EdgeHTML: Microsoft
Presto : opera
7) Что такое API
Набор методов для доступа к функциональности другой программы (ситсема оплаты в магазине, не нужно разрабатывать свою платежную систему). 
Интерфейс, через который происходит общение с сервером. 
8. Что такое ендпоинты
Это некий шлюз, который соединяет серверные процессы приложения с внешним интерфейсом (адрес, на который отправляются сообщения). 
Каждый метод запроса - это отдельный эндпоинт.
сom/эндпоинт
9) URL (URI, URL, URN)
URI=URL + URN (уникальный индификатор ресурса, это обобщенное понятие множества индетификаций нашего ресурса, может включать, как URL, так и URN или вместе) где и как найти ресурс
URL- уникальный адрес сайта в сети, местонахождение сайта в сети
URN- неизменяемая последовательность символов, определяющая только имя некоторого ресурса. (только имя но не говорит как к нему подключиться)
10) Идемпотентные HTTP методы
Если идентичный запрос сделать несколько раз подряд, олжен быть один и тот же эффект, не изменяющий состояние сервера. Возвращаемые коды могт отличаться например delete. 
Post не относиться, так можно вызвать несколько раз и добавить несколько строк.
11) Безопасные HTTP методы
HEAD, GET, OPTIONS и TRACE, предназначены только для получения информации и не должны изменять состояние сервера. Безопасные операции идемпоненты, тк состояние сервера не меняется.
12) Иденфикация, Аутентификация, Авторизация
Идентификация — процедура, в результате выполнения которой для субъекта идентификации выявляется его идентификатор, однозначно определяющий этого субъекта в информационной системе.
Аутентификация — процедура проверки подлинности, например проверка подлинности пользователя путем сравнения введенного им пароля с паролем, сохраненным в базе данных.
Авторизация — предоставление определенному лицу или группе лиц прав на выполнение определенных действий.
13) Что такое IP
IP-адрес - это уникальный сетевой адрес узла в компьютерной сети, построенный по протоколу ip.
Система доменных имен (dns domain name system). Смысл её в том, что каждому цифровому ip-адресу присваивается понятное буквенное имя, либо же его еще называют 
домен. Т.е. когда вы вводите в браузере доменное имя, вот эти сервера dns преобразуют его в ip-адрес. С помощью dns эта информация в буквенном значении преобразуется 
в числовое, и уже севера могут понимать что от них хотят и какую информацию хотят получить. Поэтому мы получаем уже информацию от серверов в этом буквенном виде 
с помощью преобразования в dns.
14) Что такое октаты в DNS
ip состоит из 4х чисел,которые называются октетами. Каждый октет принимает значение от 0 до 255. Длина каждого октета равна 8 бит
15) Что такое порт, сколько портов у Linux сервера
сетевые порты- это механизм с помощью которого операционная система определяет какой именно прргорамме необходимо передать сетевой пакет.(индефицируемый номером сетевой ресурс
выделяемый приложению, выполняемому на некотором сетевом хосте, для связи с приложениями на других хостах)
16 битная адресация, количетсво портов 2:16= 65536 в linux
16) Уровни OSI
а) физический уровень- обмен физическими сигналами между физ устройствами(оперируют битами, они передаются по проводам(оптоволокно) или без проводов(блютус);
б) канальный- вопрос адресации при передачи информации, адресом является мак адрес. Канальный уровень отвечает за доставку кадров адресату и и х целостность. 
Адресация работает только в пределах одного сетевого сегмента и ничго не знает о маршрутизации;
в) сетевой- адресация по айпи адресам;
г) транспортный- появляются порты. (протоколы udp, tcp) отвечают за прямую связь между приложениями и за надежность доставки информации;
д) сеансовый- управляет сеансом связи, обменом информации, правами;
е) представительский- представление и ифрование данных;
ж) прикладной- не задумываются о маршрутизации и гарантии дотсавки информции, реализация конкретных действий (например,получние html)
17) Хедеры http запросов
хедеры- это заголовки, описывают как наша основная часть должна передаваться.
host - запрос на определеные ip-адреса;
user-agent - имя и версия браузера, название и версия операционной ситуации, язык по умолчанию;
accept-encoding - большинство браузеров поддерживают gzip и передают в сжатом формате;
if-modified-since- если документ уже был сохранен в кеше браузера, браузер может проверить, был ли документ обновлен;
cookie- это файлы cookie, хранящиеся в браузере;
заголовки в ответах
Cache-Control- указание директив, которые должны выполняться всеми механизмами кэширования по цепочке запросов/ответов;
Content-Type- указывает "mime-type" документа. Затем браузер определяет, как интерпретировать содержимое на основании этого;
Content-Disposition- этот header указывает браузеру открыть окно загрузки файла, вместо того, чтобы пытаться проанализировать содержимое;
Content-Length- когда контент будет передаваться браузеру, сервер может указать его размер (в байтах), используя этот header;
Set-Cookie- когда веб-сайт хочет установить или обновить файл cookie в вашем браузере, он будет использовать этот header.
WWW-Authenticate- сайт может отправить этот header для аутентификации пользователя через HTTP. Когда браузер увидит этот header, он откроет диалоговое окно входа в систему;
Content-Encoding- этот header обычно устанавливается, когда возвращаемое содержимое сжимается.