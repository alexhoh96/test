{
	"info": {
		"_postman_id": "1058d5bd-ce35-4fc3-8e5f-0565772c92b1",
		"name": "hm_2 Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21420624"
	},
	"item": [
		{
			"name": "1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.eql(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response в json.\r",
							"var responseJson = pm.response.json()\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Name = Alex\", function () {\r",
							"    pm.expect(responseJson.name).to.eql(\"Alex\");\r",
							"});\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Age = 26\", function () {\r",
							"    pm.expect(responseJson.age).to.eql(\"26\");\r",
							"});\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Salary = 50000\", function () {\r",
							"    pm.expect(responseJson.salary).to.eql(50000);\r",
							"});\r",
							"// 7. Спарсить request.\r",
							"let requestJson = request.data\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name response\", function () {\r",
							"    pm.expect(responseJson.name).to.eql(requestJson.name);\r",
							"});\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age response\", function () {\r",
							"    pm.expect(responseJson.age).to.eql(requestJson.age);\r",
							"});\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let a = responseJson.salary\r",
							"let b = Number(requestJson.salary)\r",
							"pm.test(\"Salary response\", function () {\r",
							"    pm.expect(responseJson.salary).to.eql(b)\r",
							"});\r",
							"console.log(a)\r",
							"console.log(b)\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(responseJson.family)\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"u_salary_1_5_year=salary*4\", function () {\r",
							"    pm.expect(responseJson.family.u_salary_1_5_year).to.eql(Number(requestJson.salary)*4)\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "50000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let responseJson = pm.response.json()\r",
							"// 4. Спарсить request.\r",
							"let requestJson = pm.request.url.query.toObject()\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(requestJson.name).to.eql(requestJson.name);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Your test age\", function () {\r",
							"    pm.expect(requestJson.age).to.eql(requestJson.age);\r",
							"});\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Your test salary\", function () {\r",
							"    pm.expect(requestJson.salary).to.eql(requestJson.salary);\r",
							"});\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log (responseJson.family)\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog have name\", function () {\r",
							"    pm.expect(responseJson.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog have age\", function () {\r",
							"    pm.expect(responseJson.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"// let DogName = responseJson.family.pets.dog;\r",
							"pm.test(\"Name = Luky\", function () {\r",
							"    pm.expect(responseJson.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Age = 4\", function () {\r",
							"    pm.expect(responseJson.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Alex&age=26&salary=50000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Alex"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "50000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let responseJson = pm.response.json()\r",
							"// 4. Спарсить request.\r",
							"let requestJson = pm.request.url.query.toObject()\r",
							"// // 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(responseJson.name).to.eql(requestJson.name);\r",
							"});\r",
							"// // 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Your test age\", function () {\r",
							"    pm.expect(responseJson.name).to.eql(requestJson.name);\r",
							"});\r",
							"// // 7. Вывести в консоль параметр salary из request.\r",
							"console.log(requestJson.salary)\r",
							"// // 8. Вывести в консоль параметр salary из response.\r",
							"console.log(responseJson.salary)\r",
							"// // 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(responseJson.salary[0])\r",
							"// // 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(responseJson.salary[1])\r",
							"// // 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(responseJson.salary[2])\r",
							"// // 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"0 parametr\", function () {\r",
							"    pm.expect(responseJson.salary[0]).to.eql(Number(requestJson.salary));\r",
							"});\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"0 parametr\", function () {\r",
							"    pm.expect(Number(responseJson.salary[1])).to.eql(Number(requestJson.salary)*2);\r",
							"});\r",
							"console.log(requestJson.salary)\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"2 parametr\", function () {\r",
							"    pm.expect(Number(responseJson.salary[2])).to.eql(Number(requestJson.salary)*3);\r",
							"});\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"// // 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", \"Sergei\");\r",
							"// // 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", \"30\");\r",
							"// // 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", \"10000\");\r",
							"// // 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for(let i=responseJson.salary[0]; i<responseJson.salary.length; i++)\r",
							"console.log(responseJson.salary[i])"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Alex&age=26&salary=50000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Alex"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "50000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"let responseJson = pm.response.json()\r",
							"// 7. Спарсить request.\r",
							"let requestJson = request.data\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Start qa salary\", function () {\r",
							"    pm.expect(JSON.stringify(responseJson)).to.include(\"start_qa_salary\");\r",
							"});\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"    pm.expect(JSON.stringify(responseJson)).to.include(\"qa_salary_after_6_months\");\r",
							"});\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"qa_salary_after_12_months\", function () {\r",
							"    pm.expect(JSON.stringify(responseJson)).to.include(\"qa_salary_after_12_months\");\r",
							"});\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(JSON.stringify(responseJson)).to.include(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"qa_salary_after_3.5_year\", function () {\r",
							"    pm.expect(JSON.stringify(responseJson)).to.include(\"qa_salary_after_3.5_year\");\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"person\", function () {\r",
							"    pm.expect(JSON.stringify(responseJson)).to.include(\"person\")\r",
							"});\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Salary1\", function () {\r",
							"    pm.expect(responseJson.start_qa_salary).to.eql(Number(requestJson.salary));\r",
							"});\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Salary2\", function () {\r",
							"    pm.expect(responseJson.qa_salary_after_6_months).to.eql(Number(requestJson.salary)*2);\r",
							"});\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Salary3\", function () {\r",
							"    pm.expect(responseJson.qa_salary_after_12_months).to.eql(Number(requestJson.salary)*2.7);\r",
							"})\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Salary4\", function () {\r",
							"    pm.expect(responseJson[`qa_salary_after_1.5_year`]).to.eql(Number(requestJson.salary)*3.3);\r",
							"});\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Salary5\", function () {\r",
							"    pm.expect(responseJson[`qa_salary_after_3.5_years`]).to.eql(Number(requestJson.salary)*3.8);\r",
							"});\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"uname\", function () {\r",
							"    pm.expect(responseJson.person.u_name[1]).to.eql(Number(requestJson.salary));\r",
							"});\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"uage\", function () {\r",
							"    pm.expect(responseJson.person.u_age).to.eql(Number(requestJson.age));\r",
							"});\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"uage\", function () {\r",
							"    pm.expect(responseJson.person.u_salary_5_years).to.eql(Number(requestJson.salary)*4.2);\r",
							"});\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person\r",
							"for(let i in responseJson.person)\r",
							"console.log(responseJson.person[i])\r",
							"// или\r",
							"for (let i in responseJson.person){\r",
							"    console.log(`${i}-${responseJson.person[i]}`)\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}